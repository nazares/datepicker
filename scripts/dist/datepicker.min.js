Date.prototype.gID = function () { return (this.getDay() + 6) % 7 + 1 }, Date.prototype.dOY = function () { let a = new Date(this); return a.setMonth(0, 0), Math.round((this - a) / 864e5) }, Date.prototype.nth = function () { return ["st", "nd", "rd"][((this.getDate() + 90) % 100 - 10) % 10 - 1] || "th" }, Date.prototype.wN = function () { let a = new Date(this.valueOf()), b = (this.getDay() + 6) % 7; a.setDate(a.getDate() - b + 3); let c = a.valueOf(); return a.setMonth(0, 1), 4 !== a.getDay() && a.setMonth(0, 1 + (4 - a.getDay() + 7) % 7), 1 + Math.ceil((c - a) / 6048e5) }, Date.prototype.dOY = function () { let a = new Date(this); return a.setMonth(0, 0), Math.round((this - a) / 864e5) }, Date.prototype.isLeap = function (a) { return 0 == a % 100 ? 0 == a % 400 : 0 == a % 4 }, Date.prototype.dIM = function () { let a = new Date(this), b = new Date(this).getFullYear(), c = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][a.getMonth()]; return 2 === a.getMonth() + 1 && (c += iLY(new Date().getFullYear()) ? 1 : 0), c }; function iLY(a) { return 0 == a % 100 ? 0 == a % 400 : 0 == a % 4 } class Day { constructor(a = null, b = "default") { var c; a = null !== (c = a) && void 0 !== c ? c : new Date, this.Date = a, this.date = a.getDate(), this.day = a.toLocaleString(b, { weekday: "long" }), this.dayNumber = a.getDay() + 1, this.dayShort = a.toLocaleString(b, { weekday: "short" }), this.year = a.getFullYear(), this.yearShort = a.toLocaleString(b, { year: "2-digit" }), this.month = a.toLocaleString(b, { month: "long" }), this.mS = a.toLocaleString(b, { month: "short" }), this.mN = a.getMonth() + 1, this.timestamp = a.getTime(), this.wN = a.wN(), this.ID = a.gID(), this.sx = a.nth(), this.dOY = a.dOY(), this.leap = a.isLeap(this.year), this.dIM = a.dIM() } get isToday() { return this.isEqualTo(new Date) } isEqualTo(a) { return a = a instanceof Day ? a.Date : a, a.getDate() === this.date && a.getMonth() === this.mN - 1 && a.getFullYear() === this.year } format(a) { return a.replace(/\bd\b/, this.date.toString().padStart(2, 0)).replace(/\bD\b/, this.dayShort).replace(/\bj\b/, this.date).replace(/\bl\b/, this.day).replace(/\bN\b/, this.ID).replace(/\bS\b/, this.sx).replace(/\bjS\b/, this.date + this.sx).replace(/\bw\b/, this.dayNumber - 1).replace(/\bz\b/, this.dOY - 1).replace(/\bW\b/, this.wN).replace(/\bF\b/, this.month).replace(/\bm\b/, this.mN.toString().padStart(2, "0")).replace(/\bM\b/, this.mS).replace(/\bn\b/, this.mN).replace(/\bt\b/, this.dIM).replace(/\bL\b/, this.leap).replace(/\bY\b/, this.year).replace(/\by\b/, this.yearShort) } } class Month { constructor(a = null, b = "default") { const c = new Day(a, b); this.lang = b, this.name = c.month, this.number = c.mN, this.year = c.year, this.nOD = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][this.number - 1], 2 === this.number && (this.nOD += iLY(c.year) ? 1 : 0), this[Symbol.iterator] = function* () { let a = 1; for (yield this.getDay(a); a < this.nOD;)++a, yield this.getDay(a) } } getDay(a) { return new Day(new Date(this.year, this.number - 1, a), this.lang) } } class Cal { constructor(a = null, b = null, c = "default") { this.weekDays = Array.from({ length: 7 }), this.today = new Day(null, c), this.year = null !== a && void 0 !== a ? a : this.today.year, this.month = new Month(new Date(this.year, (b || this.today.mN) - 1), c), this.lang = c, this[Symbol.iterator] = function* () { let a = 1; for (yield this.getMonth(a); 12 > a;)++a, yield this.getMonth(a) }, this.weekDays.forEach((a, b) => { const c = this.month.getDay(b + 1); this.weekDays.includes(c.day) || (this.weekDays[c.dayNumber - 1] = c.day) }) } get iLY() { return iLY(this.year) } getMonth(a) { return new Month(new Date(this.year, a - 1), this.lang) } getPreviousMonth() { return 1 === this.month.number ? new Month(new Date(this.year - 1, 11), this.lang) : new Month(new Date(this.year, this.month.number - 2), this.lang) } getNextMonth() { return 12 === this.month.number ? new Month(new Date(this.year + 1, 0), this.lang) : new Month(new Date(this.year, this.month.number + 2), this.lang) } goToDate(a, b) { this.month = new Month(new Date(this.year, a - 1), this.lang), this.year = b } goToday() { this.month = new Month(new Date(), this.lang), this.year = new Day().year } gTNY() { this.year += 1, this.month = new Month(new Date(this.year, 0), this.lang) } goToPreviousYear() { this.year -= 1, this.month = new Month(new Date(this.year, 11), this.lang) } gTNM() { return 12 === this.month.number ? this.gTNY() : void (this.month = new Month(new Date(this.year, this.month.number + 1 - 1), this.lang)) } goToPreviousMonth() { return 1 === this.month.number ? this.goToPreviousYear() : void (this.month = new Month(new Date(this.year, this.month.number - 1 - 1), this.lang)) } } class DatePicker extends HTMLElement { constructor() { var a; super(), this.format = "F jS (D),Y", this.position = "bottom", this.visible = !1, this.date = null, this.mounted = !1, this.tB = null, this.input = null, this.todayButton = null, this.cDD = null, this.cDE = null, this.calDaysContainer = null, this.sDE = null; const b = window.navigator.language, c = new Date(null !== (a = this.date) && void 0 !== a ? a : this.getAttribute("date") || Date.now()); this.shadow = this.attachShadow({ mode: "open" }), this.date = new Day(c, b), this.cal = new Cal(this.date.year, this.date.mN, b), this.format = this.getAttribute("format") || this.format, this.position = DatePicker.position.includes(this.getAttribute("position")) ? this.getAttribute("position") : this.position, this.visible = "" === this.getAttribute("visible") || "true" === this.getAttribute("visible") || this.visible, this.render() } connectedCallback() { this.mounted = !0, this.tB = this.shadow.querySelector(".date-toggle"), this.cDD = this.shadow.querySelector(".cal-dropdown"), this.todayButton = this.shadow.querySelector(".today-btn"); const [a, b, c] = this.cDD.querySelector(".header").children; this.cDE = b, this.calDaysContainer = this.cDD.querySelector(".month-days"), this.tB.addEventListener("click", () => this.toggleCal()), this.todayButton.addEventListener("click", () => this.goToday()), a.addEventListener("click", () => this.pM()), c.addEventListener("click", () => this.nM()), document.addEventListener("click", a => this.handleClickOut(a)), this.rCD() } attributeChangedCallback(a, b, c) { this.mounted && ("date" === a ? (this.date = new Day(new Date(c)), this.cal.goToDate(this.date.mN, this.date.year), this.rCD(), this.uTT()) : "format" === a ? (this.format = c, this.uTT()) : "visible" === a ? (this.visible = ["", "true", "false"].includes(c) ? "" === c || "true" === c : this.visible, this.toggleCal(this.visible)) : "position" === a ? (this.position = DatePicker.position.includes(c) ? c : this.position, this.cDD.className = `cal-dropdown ${this.visible ? "visible" : ""} ${this.position}`) : void 0) } toggleCal(a = null) { null === a ? (this.cDD.classList.toggle("visible"), this.tB.classList.toggle("active")) : a ? (this.cDD.classList.add("visible"), this.tB.classList.add("active")) : (this.cDD.classList.remove("visible"), this.tB.classList.remove("active")), this.visible = this.cDD.className.includes("visible"), this.visible || this.tB.focus() } pM() { this.cal.goToPreviousMonth(), this.rCD() } nM() { this.cal.gTNM(), this.rCD() } goToday() { this.cal.goToday(), this.rCD(), this.selectDay(this.shadow.querySelector(".today"), new Day) } updateHeaderText() { this.cDE.textContent = `${this.cal.month.name},${this.cal.year}`, this.cDE.setAttribute("aria-label", `current month ${this.date.format(this.format)}`) } isSelectedDate(a) { return a.date === this.date.date && a.mN === this.date.mN && a.year === this.date.year } isCurrentCalMonth() { return this.cal.month.number === this.date.mN && this.cal.year === this.date.year } selectDay(a, b) { b.isEqualTo(this.date) || (this.date = b, b.mN === this.cal.month.number ? (a.classList.add("selected"), this.sDE.classList.remove("selected"), this.sDE = a) : (b.mN < this.cal.month.number && this.pM(), b.mN > this.cal.month.number && this.nM()), this.toggleCal(), this.uTT()) } handleClickOut(a) { this.visible && this !== a.target && (this.toggleCal(!1), !this.isCurrentCalMonth() && (this.cal.goToDate(this.date.mN, this.date.year), this.rCD())) } getWeekDaysElementStrings() { return this.cal.weekDays.map(a => `<span>${a.substring(0, 3)}</span>`).join("") } getMonthDaysGrid() { const a = this.cal.month.getDay(1), b = this.cal.month.getDay(this.cal.month.nOD), c = 7 - b.dayNumber, d = this.cal.getPreviousMonth(), e = a.dayNumber - 1, f = this.cal.month.nOD + e + c, g = Array.from({ length: f }); for (let a = e; a < f; a++)g[a] = this.cal.month.getDay(a + 1 - e); for (let a = 0; a < e; a++) { const b = e - (a + 1); g[a] = d.getDay(d.nOD - b) } return g } uTT() { const a = this.date.format(this.format); this.tB.textContent = a } updateMonthDays() { this.calDaysContainer.innerHTML = "", this.getMonthDaysGrid().forEach(a => { const b = document.createElement("button"); b.className = "month-day", b.textContent = a.date, b.addEventListener("click", () => this.selectDay(b, a)), b.setAttribute("aria-label", a.format(this.format)), a.mN === this.cal.month.number && b.classList.add("current"), this.isSelectedDate(a) && (b.classList.add("selected"), this.sDE = b), a.isEqualTo(new Day) && b.classList.add("today"), (1 === a.dayNumber || 7 === a.dayNumber) && b.classList.add("weekend"), this.calDaysContainer.appendChild(b) }) } rCD() { this.updateHeaderText(), this.updateMonthDays(), this.cDE.focus() } static get observedAttributes() { return ["date", "format", "visible", "position"] } static get position() { return ["top", "left", "bottom", "right"] } get style() { return `:host {position:relative;font-family:monospace;}.date-toggle {display:flex;justify-content:center;align-items:center;padding:0 0 0 1rem;border:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:#eee;color:#333;border-radius:5px;border:2px solid #000;font-weight:bold;cursor:pointer;text-transform:capitalize;font-family:'Fira Code',monospace;vertical-align:middle;}.date-toggle::after {content:'cal';display:inline-block;padding:.45rem .8rem;margin:0 0 0 1rem;background:#000;color:#fff;border-color:#000c;border-left:1px solid #000;font-size:.7rem;}.date-toggle.active::after {background:#f55;border-radius:0 3px 3px 0;}.cal-dropdown {display:none;height:275px;position:absolute;top:100%;left:50%;transform:translate(-50%,8px);padding:1rem;background:#fff;border-radius:5px;border:1px solid #eee;transition:all .5s ease-in-out;z-index:9999;}.cal-dropdown.top {top:auto;bottom:100%;transform:translate(-50%,-8px);}.cal-dropdown.left {top:50%;left:0;transform:translate(calc(-8px + -100%),-50%);}.cal-dropdown.right {top:50%;left:100%;transform:translate(8px,-50%);}.today-btn {position:absolute;bottom:.5rem;width:calc(100% - 2rem);text-align:center;cursor:pointer;}.cal-dropdown.visible {display:block;opacity:1;}.header {display:flex;justify-content:space-between;align-items:center;margin:5px 0 10px;}.header h4 {margin:0;text-transform:capitalize;font-size:1rem;font-weight:bold;}.header button {padding:0;border:8px solid transparent;width:0;height:0;border-radius:2px;border-top-color:#555;transform:rotate(90deg);cursor:pointer;background:none;position:relative;}.header button::after {content:'';display:block;width:25px;height:25px;position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);}.header button:last-of-type {transform:rotate(-90deg);}.week-days {display:grid;grid-template-columns:repeat(7,1fr);margin-bottom:5px;-webkit-user-select:none;cursor:default;}.week-days span{display:flex;justify-content:center;font-size:10px;text-transform:capitalize;}.week-days span:first-child {color:red;}.week-days span:last-child {color:red;}.month-days {display:grid;grid-template-columns:repeat(7,1fr);grid-gap:5px;}.month-day {border:none;background:#eee;opacity:0.3;font-family:'Fira Code',monospace;padding:5px 6px;display:flex;justify-content:center;align-items:center;border-radius:5px;cursor:pointer;}.month-day.current {display:flex;opacity:1;border:1px solid #0002;}.month-day.weekend {color:#f55;}.month-day.today {background:#f55;border:1px solid #000;color:#000;}.month-day.selected {background:#9f9;border-color:#0008;color:#000;}.month-day:hover {background:#000a;color:#fff;}` } render() { const a = `${this.cal.month.name},${this.cal.year}`, b = this.date.format(this.format); this.shadow.innerHTML = `<style>${this.style}</style><div class="date-p"><button type="button" class="date-toggle">${b}</button></div><div class="cal-dropdown ${this.visible ? "visible" : ""} ${this.position}"><div class="header"><button type="button" class="prev-month" aria-label="previous month"></button><h4 tabindex="0" aria-label="current month ${a}">${a}</h4><button type="button" class="prev-month" aria-label="next month"></button></div><div class="week-days">${this.getWeekDaysElementStrings()}</div><div class="month-days"></div><div class="today-btn">Today</div></div>` } } customElements.define("date-picker", DatePicker);