Date.prototype.getISODay = function () { return (this.getDay() + 6) % 7 + 1 }, Date.prototype.dayOfYear = function () { let a = new Date(this); return a.setMonth(0, 0), Math.round((this - a) / 864e5) }, Date.prototype.nth = function () { return ["st", "nd", "rd"][((this.getDate() + 90) % 100 - 10) % 10 - 1] || "th" }, Date.prototype.weekNumber = function () { let a = new Date(this.valueOf()), b = (this.getDay() + 6) % 7; a.setDate(a.getDate() - b + 3); let c = a.valueOf(); return a.setMonth(0, 1), 4 !== a.getDay() && a.setMonth(0, 1 + (4 - a.getDay() + 7) % 7), 1 + Math.ceil((c - a) / 6048e5) }, Date.prototype.dayOfYear = function () { let a = new Date(this); return a.setMonth(0, 0), Math.round((this - a) / 864e5) }, Date.prototype.isLeap = function (a) { return 0 == a % 100 ? 0 == a % 400 : 0 == a % 4 }, Date.prototype.daysInMonth = function () { let a = new Date(this), b = new Date(this).getFullYear(), c = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][a.getMonth()]; return 2 === a.getMonth() + 1 && (c += isLeapYear(new Date().getFullYear()) ? 1 : 0), c }; function isLeapYear(a) { return 0 == a % 100 ? 0 == a % 400 : 0 == a % 4 } class Day { constructor(a = null, b = "default") { a = a ?? new Date, this.Date = a, this.date = a.getDate(), this.day = a.toLocaleString(b, { weekday: "long" }), this.dayNumber = a.getDay() + 1, this.dayShort = a.toLocaleString(b, { weekday: "short" }), this.year = a.getFullYear(), this.yearShort = a.toLocaleString(b, { year: "2-digit" }), this.month = a.toLocaleString(b, { month: "long" }), this.monthShort = a.toLocaleString(b, { month: "short" }), this.monthNumber = a.getMonth() + 1, this.timestamp = a.getTime(), this.weekNumber = a.weekNumber(), this.ISODay = a.getISODay(), this.suffix = a.nth(), this.dOY = a.dayOfYear(), this.leap = a.isLeap(this.year), this.dIM = a.daysInMonth() } get isToday() { return this.isEqualTo(new Date) } isEqualTo(a) { return a = a instanceof Day ? a.Date : a, a.getDate() === this.date && a.getMonth() === this.monthNumber - 1 && a.getFullYear() === this.year } format(a) { return a.replace(/\bd\b/, this.date.toString().padStart(2, 0)).replace(/\bD\b/, this.dayShort).replace(/\bj\b/, this.date).replace(/\bl\b/, this.day).replace(/\bN\b/, this.ISODay).replace(/\bS\b/, this.suffix).replace(/\bjS\b/, this.date + this.suffix).replace(/\bw\b/, this.dayNumber - 1).replace(/\bz\b/, this.dOY - 1).replace(/\bW\b/, this.weekNumber).replace(/\bF\b/, this.month).replace(/\bm\b/, this.monthNumber.toString().padStart(2, "0")).replace(/\bM\b/, this.monthShort).replace(/\bn\b/, this.monthNumber).replace(/\bt\b/, this.dIM).replace(/\bL\b/, this.leap).replace(/\bY\b/, this.year).replace(/\by\b/, this.yearShort) } } class Month { constructor(a = null, b = "default") { const c = new Day(a, b); this.lang = b, this.name = c.month, this.number = c.monthNumber, this.year = c.year, this.numberOfDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][this.number - 1], 2 === this.number && (this.numberOfDays += isLeapYear(c.year) ? 1 : 0), this[Symbol.iterator] = function* () { let a = 1; for (yield this.getDay(a); a < this.numberOfDays;)++a, yield this.getDay(a) } } getDay(a) { return new Day(new Date(this.year, this.number - 1, a), this.lang) } } class Calendar { constructor(a = null, b = null, c = "default") { this.weekDays = Array.from({ length: 7 }), this.today = new Day(null, c), this.year = a ?? this.today.year, this.month = new Month(new Date(this.year, (b || this.today.monthNumber) - 1), c), this.lang = c, this[Symbol.iterator] = function* () { let a = 1; for (yield this.getMonth(a); 12 > a;)++a, yield this.getMonth(a) }, this.weekDays.forEach((a, b) => { const c = this.month.getDay(b + 1); this.weekDays.includes(c.day) || (this.weekDays[c.dayNumber - 1] = c.day) }) } get isLeapYear() { return isLeapYear(this.year) } getMonth(a) { return new Month(new Date(this.year, a - 1), this.lang) } getPreviousMonth() { return 1 === this.month.number ? new Month(new Date(this.year - 1, 11), this.lang) : new Month(new Date(this.year, this.month.number - 2), this.lang) } getNextMonth() { return 12 === this.month.number ? new Month(new Date(this.year + 1, 0), this.lang) : new Month(new Date(this.year, this.month.number + 2), this.lang) } goToDate(a, b) { this.month = new Month(new Date(this.year, a - 1), this.lang), this.year = b } goToday() { this.month = new Month(new Date(), this.lang), this.year = new Day().year } goToNextYear() { this.year += 1, this.month = new Month(new Date(this.year, 0), this.lang) } goToPreviousYear() { this.year -= 1, this.month = new Month(new Date(this.year, 11), this.lang) } goToNextMonth() { return 12 === this.month.number ? this.goToNextYear() : void (this.month = new Month(new Date(this.year, this.month.number + 1 - 1), this.lang)) } goToPreviousMonth() { return 1 === this.month.number ? this.goToPreviousYear() : void (this.month = new Month(new Date(this.year, this.month.number - 1 - 1), this.lang)) } } class DatePicker extends HTMLElement { constructor() { super(), this.format = "F jS (D), Y", this.position = "bottom", this.visible = !1, this.date = null, this.mounted = !1, this.toggleButton = null, this.todayButton = null, this.calendarDropDown = null, this.calendarDateElement = null, this.calendarDaysContainer = null, this.selectedDayElement = null; const a = window.navigator.language, b = new Date(this.date ?? (this.getAttribute("date") || Date.now())); this.shadow = this.attachShadow({ mode: "open" }), this.date = new Day(b, a), this.calendar = new Calendar(this.date.year, this.date.monthNumber, a), this.format = this.getAttribute("format") || this.format, this.position = DatePicker.position.includes(this.getAttribute("position")) ? this.getAttribute("position") : this.position, this.visible = "" === this.getAttribute("visible") || "true" === this.getAttribute("visible") || this.visible, this.render() } connectedCallback() { this.mounted = !0, this.toggleButton = this.shadow.querySelector(".date-toggle"), this.calendarDropDown = this.shadow.querySelector(".calendar-dropdown"), this.todayButton = this.shadow.querySelector(".today-btn"); const [a, b, c] = this.calendarDropDown.querySelector(".header").children; this.calendarDateElement = b, this.calendarDaysContainer = this.calendarDropDown.querySelector(".month-days"), this.toggleButton.addEventListener("click", () => this.toggleCalendar()), this.todayButton.addEventListener("click", () => this.goToday()), a.addEventListener("click", () => this.prevMonth()), c.addEventListener("click", () => this.nextMonth()), document.addEventListener("click", a => this.handleClickOut(a)), this.renderCalendarDays() } attributeChangedCallback(a, b, c) { this.mounted && ("date" === a ? (this.date = new Day(new Date(c)), this.calendar.goToDate(this.date.monthNumber, this.date.year), this.renderCalendarDays(), this.updateToggleText()) : "format" === a ? (this.format = c, this.updateToggleText()) : "visible" === a ? (this.visible = ["", "true", "false"].includes(c) ? "" === c || "true" === c : this.visible, this.toggleCalendar(this.visible)) : "position" === a ? (this.position = DatePicker.position.includes(c) ? c : this.position, this.calendarDropDown.className = `calendar-dropdown ${this.visible ? "visible" : ""} ${this.position}`) : void 0) } toggleCalendar(a = null) { null === a ? (this.calendarDropDown.classList.toggle("visible"), this.toggleButton.classList.toggle("active")) : a ? (this.calendarDropDown.classList.add("visible"), this.toggleButton.classList.add("active")) : (this.calendarDropDown.classList.remove("visible"), this.toggleButton.classList.remove("active")), this.visible = this.calendarDropDown.className.includes("visible"), this.visible || this.toggleButton.focus() } prevMonth() { this.calendar.goToPreviousMonth(), this.renderCalendarDays() } nextMonth() { this.calendar.goToNextMonth(), this.renderCalendarDays() } goToday() { new Day; this.calendar.goToday(), this.renderCalendarDays(), this.selectDay(this.shadow.querySelector(".today"), new Day) } updateHeaderText() { this.calendarDateElement.textContent = `${this.calendar.month.name}, ${this.calendar.year}`, this.calendarDateElement.setAttribute("aria-label", `current month ${this.date.format(this.format)}`) } isSelectedDate(a) { return a.date === this.date.date && a.monthNumber === this.date.monthNumber && a.year === this.date.year } isCurrentCalendarMonth() { return this.calendar.month.number === this.date.monthNumber && this.calendar.year === this.date.year } selectDay(a, b) { b.isEqualTo(this.date) || (this.date = b, b.monthNumber === this.calendar.month.number ? (a.classList.add("selected"), this.selectedDayElement.classList.remove("selected"), this.selectedDayElement = a) : (b.monthNumber < this.calendar.month.number && this.prevMonth(), b.monthNumber > this.calendar.month.number && this.nextMonth()), this.toggleCalendar(), this.updateToggleText()) } handleClickOut(a) { this.visible && this !== a.target && (this.toggleCalendar(!1), !this.isCurrentCalendarMonth() && (this.calendar.goToDate(this.date.monthNumber, this.date.year), this.renderCalendarDays())) } getWeekDaysElementStrings() { return this.calendar.weekDays.map(a => `<span>${a.substring(0, 3)}</span>`).join("") } getMonthDaysGrid() { const a = this.calendar.month.getDay(1), b = this.calendar.month.getDay(this.calendar.month.numberOfDays), c = 7 - b.dayNumber, d = this.calendar.getPreviousMonth(), e = a.dayNumber - 1, f = this.calendar.month.numberOfDays + e + c, g = Array.from({ length: f }); for (let a = e; a < f; a++)g[a] = this.calendar.month.getDay(a + 1 - e); for (let a = 0; a < e; a++) { const b = e - (a + 1); g[a] = d.getDay(d.numberOfDays - b) } return g } updateToggleText() { const a = this.date.format(this.format); this.toggleButton.textContent = a, this.setAttribute("date", this.date.format("Y-m-d")) } updateMonthDays() { this.calendarDaysContainer.innerHTML = "", this.getMonthDaysGrid().forEach(a => { const b = document.createElement("button"); b.className = "month-day", b.textContent = a.date, b.addEventListener("click", () => this.selectDay(b, a)), b.setAttribute("aria-label", a.format(this.format)), a.monthNumber === this.calendar.month.number && b.classList.add("current"), this.isSelectedDate(a) && (b.classList.add("selected"), this.selectedDayElement = b), a.isEqualTo(new Day) && b.classList.add("today"), (1 === a.dayNumber || 7 === a.dayNumber) && b.classList.add("weekend"), this.calendarDaysContainer.appendChild(b) }) } renderCalendarDays() { this.updateHeaderText(), this.updateMonthDays(), this.calendarDateElement.focus() } static get position() { return ["top", "left", "bottom", "right"] } get style() { return `:host {position:relative;font-family:monospace;}.date-toggle{display:flex;justify-content:center;align-items:center;padding:0 0 0 1rem;border:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;background: #eee;color:#333;border-radius: 5px;border:2px solid #000;font-weight:bold;cursor: pointer;text-transform:capitalize;font-family:'Fira Code',monospace;vertical-align:middle;}.date-toggle::after{content:'cal';display:inline-block;padding:.45rem .8rem;margin:0 0 0 1rem;background:#000;color:#fff;border-color:#000c;border-left:1px solid #000;font-size:.7rem;}.date-toggle.active::after{background:#f55;border-radius:0 3px 3px 0;}.calendar-dropdown{display:none;height:275px;position:absolute;top:100%;left:50%;transform:translate(-50%,8px);padding:1rem;background:#fff;border-radius:5px;border:1px solid #eee;transition:all .5s ease-in-out;z-index:9999;}.calendar-dropdown.top {top:auto;bottom:100%;transform:translate(-50%,-8px);}.calendar-dropdown.left{top:50%;left:0;transform:translate(calc(-8px + -100%),-50%);}.calendar-dropdown.right{top:50%;left:100%;transform:translate(8px, -50%);}.today-btn {position:absolute;bottom:.5rem;width:calc(100% - 2rem);text-align:center;cursor:pointer;}.calendar-dropdown.visible{display:block;opacity:1;}.header{display:flex;justify-content:space-between;align-items:center;margin:5px 0 10px;}.header h4{margin:0;text-transform:capitalize;font-size:1rem;font-weight:bold;}.header button{padding:0;border:8px solid transparent;border-radius:2px;border-top-color:#555;transform:rotate(90deg);cursor:pointer;background:none;position:relative;}.header button::after{content:'';display:block;width:25px;height:25px;position:absolute;left:50%;top:50%;transform:translate(-50%, -50%);}.header button:last-of-type{transform:rotate(-90deg);}.week-days{display:grid;grid-template-columns:repeat(7, 1fr);margin-bottom:5px;-webkit-user-select:none;cursor:default;}.week-days span{display:flex;justify-content:center;font-size:10px;text-transform:capitalize;}.week-days span:first-child{color:red;}.week-days span:last-child{color:red;}.month-days{display:grid;grid-template-columns:repeat(7,1fr);grid-gap:5px;}.month-day{border:none;background:#eee;opacity:.3;font-family:'Fira Code',monospace;padding:5px 6px;display:flex;justify-content:center;align-items:center;border-radius:5px;cursor:pointer;}.month-day.current{display:flex;opacity:1;border:1px solid #0002;}.month-day.weekend{color:#f55;}.month-day.today{background:#f55;border:1px solid #000;color:#000;}.month-day.selected{background:#9f9;border-color:#0008;color:#000;}.month-day:hover{background:#000a;color:#fff;}` } render() { const a = `${this.calendar.month.name}, ${this.calendar.year}`, b = this.date.format(this.format); this.shadow.innerHTML = `<style>${this.style}</style><div class="date-p"><button type="button" class="date-toggle">${b}</button></div><div class="calendar-dropdown ${this.visible ? "visible" : ""} ${this.position}"><div class="header"><button type="button" class="prev-month" aria-label="previous month"></button><h4 tabindex="0" aria-label="current month ${a}">${a}</h4><button type="button" class="prev-month" aria-label="next month"></button></div><div class="week-days">${this.getWeekDaysElementStrings()}</div><div class="month-days"></div><div class="today-btn">Today</div></div>` } } customElements.define("date-picker", DatePicker);